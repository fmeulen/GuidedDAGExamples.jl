innovations(n_times, n_particles) = [rand(n_particles) for _ in 1:n_times]

"""
    update!(Z·µí, Z, Œ¥, block)

    update innovations Z·¥º for all times in block
"""
function update!(Z·µí, Z, Œ¥, block)
    n_particles = length(Z[1])
    n_times = length(Z)
    ‚Ñí = Uniform(-Œ¥, Œ¥)
    for i in 1:n_particles
        for t ‚àà 1:n_times
            Z·µí[t][i] = t ‚àà block ? mod(Z[t][i] + rand(‚Ñí), 1) : Z[t][i]
        end
    end
end


function mcmc(P::SIRguided, Œ†, Z, blocks;  Œ¥ = 0.1, Œ≥ = 0.7,
     acc = 0, ITER = 100, adaptmax=1000,
     par_estimation = true,
     propœÉ = 0.1,
     prior = (Œº=Exponential(5.0), Œª = Exponential(5.0), ŒΩ=Exponential(5.0)),
     printskip=5)
     

    @unpack ùí™ = P
    n_times, n_particles = length(ùí™), length(ùí™[1].x)
    n_blocks = length(blocks)

    B = backward(P)
    #Z = innovations(n_times, n_particles)
    Z·µí = deepcopy(Z)
    X, ll  = forward(P, Œ†, B, Z)
    X·µí = deepcopy(X)

    XX = [copy(X)]
    lls = [ll]
    Œ∏s = [param(P)]

    for i in 1:ITER
        for block in blocks
            update!(Z·µí, Z, Œ¥, block)
            ll·µí = forward!(X·µí, P, Œ†, B, Z·µí)

            if log(rand()) < ll·µí - ll
                mod(i,printskip)==0 && println(i,"  ",ll,"  ", ll·µí,"  ", ll·µí-ll, "  accepted")
                ll = ll·µí
                for t ‚àà block
                    for i in 1:n_particles
                        Z[t][i] = Z·µí[t][i] # you can just swap the objects by reference i think
                    end
                end

                for t in 1:n_times
                    for i in 1:n_particles
                        X[t][i] = X·µí[t][i]
                    end
                end
                acc += 1
            else
                mod(i,printskip)==0 && println(i, "   ", ll,"  ", ll·µí,"  ", ll·µí-ll, "  rejected")
            end
            i √∑ 10 == 0 && push!(XX, deepcopy(X))
            push!(lls, ll)
        end
        if i < adaptmax && i√∑10==0
            ‚Ñênew = Œ≥ * P.‚Ñê  + (1.0-Œ≥) * count_infections(X, ùí©)
            @reset P.‚Ñê = ‚Ñênew
            B = backward(P)
            ll = forward!(X, P, Œ†, B, Z)
        end

        if par_estimation
            # update Œº
            Œº·µí = P.Œº * exp(propœÉ*randn())
            logprior_proposalratios = (log(Œº·µí) - log(P.Œº)) + logpdf(prior.Œº,Œº·µí) - logpdf(prior.Œº,P.Œº)
            P·µí = @set P.Œº = Œº·µí
            ll, P, B = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z,  ll, logprior_proposalratios)

            # update Œª
            Œª·µí = P.Œª * exp(propœÉ*randn())
            logprior_proposalratios = (log(Œª·µí) - log(P.Œª)) + logpdf(prior.Œª,Œª·µí) - logpdf(prior.Œª,P.Œª)
            P·µí = @set P.Œª = Œª·µí
            ll, P, B = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z,  ll, logprior_proposalratios)


            # update ŒΩ
            ŒΩ·µí = P.ŒΩ * exp(propœÉ*randn())
            logprior_proposalratios = (log(ŒΩ·µí) - log(P.ŒΩ)) + logpdf(prior.ŒΩ,ŒΩ·µí) - logpdf(prior.ŒΩ,P.ŒΩ)
            P·µí = @set P.ŒΩ = ŒΩ·µí
            ll, P, B = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z, ll, logprior_proposalratios)
            push!(Œ∏s, param(P))
        end
    end
    @show acc/(ITER*n_blocks)
    XX, lls, Œ∏s, P
end




function updatepar!(X·µí, X, P·µí, P, Œ†, B, Z, ll, logprior_proposalratios)
    #@unpack ùí™ = P
    B·µí = backward(P·µí)
    ll·µí = forward!(X·µí, P·µí, Œ†, B·µí, Z)

    logA = ll·µí - ll  + logprior_proposalratios
    if log(rand()) < logA
        ll = ll·µí
        P = P·µí
    #     B, B·µí = B·µí, B
    #     for t in eachindex(X)
    #         for i in eachindex(X[t])
    #            X[t][i] = X·µí[t][i]
    #         end
    #     end
        X .= X·µí
        B .= B·µí
     end
    ll, P
end
