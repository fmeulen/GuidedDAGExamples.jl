## make simple plots to explain the dynamics
Œæ = 0.999 # prob 1-Œæ of new infection (not from neighbours)
œÑ = 0.1 # time step
Œ¥obs = 0.00

presfigdir = mkpath(joinpath(wd,"figs","presentation"))

n_particles = 6
n_times = 7

latent = fill(fill(_L_, n_particles),n_times)

X =  [
[_S_, _S_, _I_, _S_,_S_,_S_],
[_S_, _S_, _I_, _S_,_S_,_S_],
[_S_, _I_, _I_, _S_,_S_,_S_],
[_I_, _I_, _R_, _S_,_S_,_S_],
[_I_, _I_, _R_, _S_,_S_,_S_],
[_I_, _I_, _S_, _S_,_S_,_S_],
[_I_, _R_, _S_, _S_,_S_,_S_]
]

plotpath(X)
for i in 1:n_times
    Xpart = copy(latent)
    Xpart[1:i] = X[1:i]
    p = plotpath(Xpart;name="")
    png(p, presfigdir*"/smallexample$i.png")
end

anim = @animate for i in 1:n_times
    Xpart = latent
    Xpart[1:i] = X[1:i]
    p = plotpath(Xpart;name="")
    p
end
mp4(anim,presfigdir*"/smallexample.mp4", fps=1.5)




# now a bigger example 
n_particles = 50
n_times = 100
size_neighbourhood = 2
latent = fill(fill(_L_, n_particles),n_times)

Random.seed!(30)



# set neighbourhood structure
ùí© = set_neighbours(n_particles, size_neighbourhood)

# set true pars
Œª, Œº, ŒΩ =  4.0, 2.5, 0.5
Ptrue = SIRforward(Œæ, Œª, Œº, ŒΩ, œÑ, ùí©)

# set initial state
x0 = vcat(_I_, fill(_S_,n_particles-2),_I_) 


X = sample_trajectory(Ptrue::SIRforward, n_times, x0)
anim2a = @animate for i in 1:n_times
    Xpart = latent
    Xpart[1:i] = X[1:i]
    p = plotpath(Xpart)
    p
end
mp4(anim2a,presfigdir*"/large_example.mp4", fps=10)


# other realisations
Random.seed!(2)
for i in 1:8
    Xtrue = sample_trajectory(Ptrue::SIRforward, n_times, x0)
    pforward = plotpath(Xtrue; name="")
    png(pforward, presfigdir*"/large_example$i.png")
end 



# also when higher rate of getting again susceptbile

Ptrue2 = @set Ptrue.ŒΩ = 1.5

Random.seed!(2)
for i in 1:8
    Xtrue = sample_trajectory(Ptrue2::SIRforward, n_times, x0)
    pforward = plotpath(Xtrue; name="")
    png(pforward, presfigdir*"/large_example_faster_susceptible$i.png")
end 


## some plots of observations

# set observation scheme
O = SA[1.0-Œ¥obs Œ¥obs/2.0 Œ¥obs/2.0; Œ¥obs/2.0 1.0- Œ¥obs Œ¥obs/2.0; Œ¥obs/2.0 Œ¥obs/2.0 1-Œ¥obs]



Random.seed!(666) # nice!!

# In the followoing, Omessages determines the message sent from observations
# Œ¥ = 0.01 # in the guided process assume some noise 
# Omessages = SA[1.0-Œ¥ Œ¥/2.0 Œ¥/2.0; Œ¥/2.0 1.0- Œ¥ Œ¥/2.0; Œ¥/2.0 Œ¥/2.0 1-Œ¥]

Xtrue = sample_trajectory(Ptrue::SIRforward, n_times, x0)

samplesize = (n_times * n_particles)√∑10   #20
ùí™ = create_data(Xtrue, samplesize, n_times, n_particles, O)

obs_times = 10:10:100
ùí™2 = create_data_regular(Xtrue, obs_times, n_times, n_particles, O)

obs_particles = 5:7:n_particles 
ùí™3 = create_data_see_some_particles(Xtrue, obs_particles, n_times, n_particles, O)

#


# visualise
lo = @layout [a;b]
pforward = plotpath(Xtrue;name="True, unobserved")
pobs = plotpath(ùí™;name="What we observe")
pp = plot(pforward, pobs, layout=lo)
png(pp,  presfigdir*"/large_example_forw_and_observe1.png")

pobs2 = plotpath(ùí™2;name="What we observe")
pp = plot(pforward, pobs2, layout=lo)
png(pp,  presfigdir*"/large_example_forw_and_observe2.png")



###############################################################
Random.seed!(58) 

# set guided process
ùí™ = ùí™2
pobs = plotpath(ùí™;name="What we observe")
‚Ñê =  initialise_infected_neighbours(ùí™)
P = SIRguided(Ptrue, ‚Ñê, ùí™, O) 
Œ† = [SA_F64[0.96, 0.04, 0.0] for _ in 1:n_particles]
B = backward(P);


# sample guided process 
Z = innovations(n_times, n_particles)
Xguided, ll  = forward(P, Œ†, B, Z);
ll_rounded = round(ll; digits=1)
pguided = plotpath(Xguided; name="Reconstructed, ll is $ll_rounded")

lo = @layout [a;b;c]
pp = plot(pforward, pguided, pobs, layout=lo)
png(pp,  presfigdir*"/large_example_forward_guided.png")

# sample multiple guided processes

Zbest = innovations(n_times, n_particles)
Xguidedbest, llbest = forward(P, Œ†, B, Zbest)

lo = @layout [a;b]
anim4 = @animate for i in 1:30
global llbest    
    Z = innovations(n_times, n_particles)
    Xguided, ll  = forward(P, Œ†, B, Z);
    lll =  round(ll; digits=1)
    pguided = plotpath(Xguided; name="Reconstructed. $lll")
    if ll > llbest
        Zbest .= Z
        llbest = ll
    end
    @show ll
    pp = plot(pforward, pguided, layout=lo)#, size=(400, 790))
    pp
end
@show llbest

mp4(anim4,presfigdir*"/multipleguided.mp4", fps=2)


Xguidedbest, llbest = forward(P, Œ†, B, Zbest)
lo = @layout [a;b;c]
plot(pforward, plotpath(Xguidedbest), pobs, layout=lo)

# now do mcmc, write function that also makes multipleguided_animation_unknownpar

function mcmc_with_animation(P::SIRguided, Œ†, Z, blocks;  Œ¥ = 0.1, Œ≥ = 0.9,
    acc = 0, ITER = 100, adaptmax=1000,
    par_estimation = false,
    propœÉ = 0.1,
    prior = (Œº=Exponential(5.0), Œª = Exponential(5.0), ŒΩ=Exponential(5.0)),
    adaptskip = 50,
    printskip=5)
    

            #    @unpack ùí™ = P
                #    n_times, n_particles = length(ùí™), length(ùí™[1].x)
            #n_blocks = length(blocks)

   B = backward(P)
   Z·µí = deepcopy(Z)
   X, ll  = forward(P, Œ†, B, Z)
   X·µí = deepcopy(X)

   XX = [copy(X)]
   lls = [ll]
   Œ∏s = [param(P)]

    anim = @animate  for i in 1:ITER
       for block in blocks
           update!(Z·µí, Z, Œ¥, block)
           ll·µí = forward!(X·µí, P, Œ†, B, Z·µí)
           if log(rand()) < ll·µí - ll
               mod(i,printskip)==0 && println(i,"  ",ll,"  ", ll·µí,"  ", ll·µí-ll, "  accepted")
               ll = ll·µí
               Z[block] .= Z·µí[block]
               X .= X·µí
               acc += 1
           else
               mod(i,printskip)==0 && println(i, "   ", ll,"  ", ll·µí,"  ", ll·µí-ll, "  rejected")
           end
        end
        i √∑ 10 == 0 && push!(XX, deepcopy(X))
        #i √∑ 10 == 0 && plotpath(X; name="")
        plotpath(X; name="")
       

       if i < adaptmax && i√∑adaptskip==0
           ‚Ñênew = Œ≥ * P.‚Ñê  + (1.0-Œ≥) * count_infections(X, ùí©)
           @reset P.‚Ñê = ‚Ñênew
           B = backward(P)
           ll = forward!(X, P, Œ†, B, Z)
       end

       if par_estimation
           # update Œº
           Œº·µí = P.Œº * exp(propœÉ*randn())
           logprior_proposalratios = (log(Œº·µí) - log(P.Œº)) + logpdf(prior.Œº,Œº·µí) - logpdf(prior.Œº,P.Œº)
           P·µí = @set P.Œº = Œº·µí
           ll, P = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z,  ll, logprior_proposalratios)

           # update Œª
           Œª·µí = P.Œª * exp(propœÉ*randn())
           logprior_proposalratios = (log(Œª·µí) - log(P.Œª)) + logpdf(prior.Œª,Œª·µí) - logpdf(prior.Œª,P.Œª)
           P·µí = @set P.Œª = Œª·µí
           ll, P = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z,  ll, logprior_proposalratios)


           # update ŒΩ
           ŒΩ·µí = P.ŒΩ * exp(propœÉ*randn())
           logprior_proposalratios = (log(ŒΩ·µí) - log(P.ŒΩ)) + logpdf(prior.ŒΩ,ŒΩ·µí) - logpdf(prior.ŒΩ,P.ŒΩ)
           P·µí = @set P.ŒΩ = ŒΩ·µí
           ll, P = updatepar!(X·µí, X, P·µí, P, Œ†,  B, Z, ll, logprior_proposalratios)
           push!(Œ∏s, param(P))
       end
       push!(lls, ll)
   end
   @show acc/(ITER*n_blocks)
   XX, lls, Œ∏s, P, anim 
end






blocksize = 10
n_blocks= n_times √∑ blocksize
blocks = make_partition(n_times, n_blocks)
#blocks = [1, 2, 3:5, 6:n_times]
Xs, lls, Œ∏s, Pout, anim  = mcmc_with_animation(P, Œ†, Zbest, blocks; Œ¥=0.005,
                ITER=200,
                Œ≥=0.8,
                adaptmax= 200,
                adaptskip=10,
                par_estimation=false, 
                printskip=1) ;  



plot(pforward,plotpath(Xs[end];name="Final iteration"),pobs, layout=lo)
plot_infections(Xs[end], ùí©)

mp4(anim,presfigdir*"/mcmc_guided.mp4", fps=20)

# with parameter par_estimation

Pinit = @set Ptrue.Œª = 2.0
P = SIRguided(Pinit, ‚Ñê, ùí™, O) 



Xs, lls, Œ∏s, Pout, anim  = mcmc_with_animation(P, Œ†, Zbest, blocks; Œ¥=0.005,
                ITER=200,
                adaptmax= 1000,
                adaptskip = 20,
                propœÉ=0.02,
                par_estimation=true, 
                printskip=5) ;  
plot(pforward,plotpath(Xs[end]),pobs, layout=lo)

lo = @layout [a;b;c;d]
Œªs = getindex.(Œ∏s,:Œª);
Œºs = getindex.(Œ∏s,:Œº);
ŒΩs = getindex.(Œ∏s,:ŒΩ);
plot(plot(lls), plot(Œªs, title="Œª", label=""),
                plot(Œºs, title="Œº", label=""),
                plot(ŒΩs, title="ŒΩ", label=""),
                layout=lo, size=(400, 600))









